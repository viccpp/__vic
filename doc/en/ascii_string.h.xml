<chapter xml:id="ascii_string.h">
<title><tt>__vic/ascii_string.h</tt></title>

<p>ASCII-strings processing tools.</p>


<chapter xml:id="ascii--tolower-str">
<title><tt>ascii::tolower()</tt></title>

<code-block lang="C++"><![CDATA[
namespace ascii {

char *tolower(char *str);
std::string &tolower(std::string &str);

}
]]></code-block>

<p>Translates all Latin capital letters of <tt>str</tt> to the small ones.
Returns <tt>str</tt>. C-string must not be <tt>nullptr</tt>!</p>

</chapter>


<chapter xml:id="ascii--toupper-str">
<title><tt>ascii::toupper()</tt></title>

<code-block lang="C++"><![CDATA[
namespace ascii {

char *toupper(char *str);
std::string &toupper(std::string &str);

}
]]></code-block>

<p>Translates all Latin small letters of <tt>str</tt> to the capital ones.
Returns <tt>str</tt>. C-string must not be <tt>nullptr</tt>!</p>

</chapter>


<chapter xml:id="ascii--equal_icase-str">
<title><tt>ascii::equal_icase()</tt></title>

<code-block lang="C++"><![CDATA[
namespace ascii {

bool equal_icase(const char *s1, const char *s2);
bool equal_icase(const char *s1, size_t s1_len,
                 const char *s2, size_t s2_len);

#if __cpp_lib_string_view // C++17

bool equal_icase(std::string_view s1, std::string_view s2);

#else // until C++17

bool equal_icase(const std::string &s1, const std::string &s2);
bool equal_icase(const std::string &s1, const char *s2);
bool equal_icase(const char *s1, const std::string &s2);

#endif
}
]]></code-block>

<p>Checks equality of two ASCII-strings ignoring the case. The pointers must not
be <tt>nullptr</tt>!</p>

</chapter>


</chapter>
